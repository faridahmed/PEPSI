//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyPepsi.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class PEPSIEntities : DbContext
    {
        public PEPSIEntities()
            : base("name=PEPSIEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Area> Areas { get; set; }
        public virtual DbSet<Bank> Banks { get; set; }
        public virtual DbSet<BankName> BankNames { get; set; }
        public virtual DbSet<Branch> Branches { get; set; }
        public virtual DbSet<BusinessUnit> BusinessUnits { get; set; }
        public virtual DbSet<ClaimApprovement> ClaimApprovements { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<CustomerExecutive> CustomerExecutives { get; set; }
        public virtual DbSet<CustomerLedgerDetail> CustomerLedgerDetails { get; set; }
        public virtual DbSet<DatabaseObject> DatabaseObjects { get; set; }
        public virtual DbSet<DepositedByPeopleName> DepositedByPeopleNames { get; set; }
        public virtual DbSet<Driver> Drivers { get; set; }
        public virtual DbSet<Helper> Helpers { get; set; }
        public virtual DbSet<InvoiceHelper> InvoiceHelpers { get; set; }
        public virtual DbSet<MainProductGroup> MainProductGroups { get; set; }
        public virtual DbSet<MenuList> MenuLists { get; set; }
        public virtual DbSet<MenuMain> MenuMains { get; set; }
        public virtual DbSet<MenuRole> MenuRoles { get; set; }
        public virtual DbSet<MenuSub> MenuSubs { get; set; }
        public virtual DbSet<OrderApprove> OrderApproves { get; set; }
        public virtual DbSet<Payment> Payments { get; set; }
        public virtual DbSet<PaymentDetail> PaymentDetails { get; set; }
        public virtual DbSet<PaymentMode> PaymentModes { get; set; }
        public virtual DbSet<PaymentTransactionType> PaymentTransactionTypes { get; set; }
        public virtual DbSet<ProductBalance> ProductBalances { get; set; }
        public virtual DbSet<ProductGroup> ProductGroups { get; set; }
        public virtual DbSet<ProductRate> ProductRates { get; set; }
        public virtual DbSet<ProductRateDetail> ProductRateDetails { get; set; }
        public virtual DbSet<ProductSubGroup> ProductSubGroups { get; set; }
        public virtual DbSet<ProductTransferNote> ProductTransferNotes { get; set; }
        public virtual DbSet<RebateScheme> RebateSchemes { get; set; }
        public virtual DbSet<SubZone> SubZones { get; set; }
        public virtual DbSet<TransactionType> TransactionTypes { get; set; }
        public virtual DbSet<TransportCapacityCas> TransportCapacityCases { get; set; }
        public virtual DbSet<TransportFareSetup> TransportFareSetups { get; set; }
        public virtual DbSet<UserLogin> UserLogins { get; set; }
        public virtual DbSet<FixedDataTable> FixedDataTables { get; set; }
        public virtual DbSet<BankBranchSubZoneQuery> BankBranchSubZoneQueries { get; set; }
        public virtual DbSet<DeliveryControl> DeliveryControls { get; set; }
        public virtual DbSet<CustomerBGInfo> CustomerBGInfoes { get; set; }
        public virtual DbSet<CustomerCreditLimit> CustomerCreditLimits { get; set; }
        public virtual DbSet<StockMovementAudit> StockMovementAudits { get; set; }
        public virtual DbSet<TerritoryDevelopmentManager> TerritoryDevelopmentManagers { get; set; }
        public virtual DbSet<OrderV> OrderVs { get; set; }
        public virtual DbSet<SalesPerson> SalesPersons { get; set; }
        public virtual DbSet<Zone> Zones { get; set; }
        public virtual DbSet<TransportAgencySetup> TransportAgencySetups { get; set; }
        public virtual DbSet<Warehouse> Warehouses { get; set; }
        public virtual DbSet<Supplier> Suppliers { get; set; }
        public virtual DbSet<POSMIssueType> POSMIssueTypes { get; set; }
        public virtual DbSet<POSMItem> POSMItems { get; set; }
        public virtual DbSet<POSMItemDestroy> POSMItemDestroys { get; set; }
        public virtual DbSet<POSMScheme> POSMSchemes { get; set; }
        public virtual DbSet<POSMTemp> POSMTemps { get; set; }
        public virtual DbSet<Vehicle> Vehicles { get; set; }
        public virtual DbSet<StorageLocation> StorageLocations { get; set; }
        public virtual DbSet<EmptyFareSetup> EmptyFareSetups { get; set; }
        public virtual DbSet<POSMStock> POSMStocks { get; set; }
        public virtual DbSet<ReplaceDetail> ReplaceDetails { get; set; }
        public virtual DbSet<ReplaceDisburseDetail> ReplaceDisburseDetails { get; set; }
        public virtual DbSet<ReplaceDisburseMaster> ReplaceDisburseMasters { get; set; }
        public virtual DbSet<ReplaceMaster> ReplaceMasters { get; set; }
        public virtual DbSet<POSMIssue> POSMIssues { get; set; }
        public virtual DbSet<POSMReceive> POSMReceives { get; set; }
        public virtual DbSet<POSMRecIss> POSMRecIsses { get; set; }
        public virtual DbSet<DBTarget> DBTargets { get; set; }
        public virtual DbSet<DBTargetType> DBTargetTypes { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<EmptyMoveDetail> EmptyMoveDetails { get; set; }
        public virtual DbSet<EmptyMoveMaster> EmptyMoveMasters { get; set; }
        public virtual DbSet<POSMItemReturn> POSMItemReturns { get; set; }
        public virtual DbSet<CustomerLedgerMaster> CustomerLedgerMasters { get; set; }
        public virtual DbSet<TransportQRData> TransportQRDatas { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<ProductTransaction> ProductTransactions { get; set; }
        public virtual DbSet<ProductTransactionDetail> ProductTransactionDetails { get; set; }
        public virtual DbSet<Returnment> Returnments { get; set; }
        public virtual DbSet<StockBatch> StockBatches { get; set; }
        public virtual DbSet<StockBatchDetail> StockBatchDetails { get; set; }
        public virtual DbSet<OrderDetail> OrderDetails { get; set; }
        public virtual DbSet<OrderSchemeDetail> OrderSchemeDetails { get; set; }
        public virtual DbSet<CustomerType> CustomerTypes { get; set; }
        public virtual DbSet<RegionalSalesManager> RegionalSalesManagers { get; set; }
        public virtual DbSet<Region> Regions { get; set; }
        public virtual DbSet<OrderBankDetail> OrderBankDetails { get; set; }
        public virtual DbSet<OrderBankSummary> OrderBankSummaries { get; set; }
        public virtual DbSet<ReturnmentDetail> ReturnmentDetails { get; set; }
        public virtual DbSet<DelV> DelVs { get; set; }
        public virtual DbSet<CashSettlement> CashSettlements { get; set; }
        public virtual DbSet<CashSettlementDetail> CashSettlementDetails { get; set; }
        public virtual DbSet<TransportAgencyandFareSetup> TransportAgencyandFareSetups { get; set; }
        public virtual DbSet<ReplaceManual> ReplaceManuals { get; set; }
    
        public virtual ObjectResult<spGetCustomerOutstanding_Result> spGetCustomerOutstanding(Nullable<int> pCustomerID)
        {
            var pCustomerIDParameter = pCustomerID.HasValue ?
                new ObjectParameter("PCustomerID", pCustomerID) :
                new ObjectParameter("PCustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetCustomerOutstanding_Result>("spGetCustomerOutstanding", pCustomerIDParameter);
        }
    
        public virtual ObjectResult<spGetDBOrderDetail_Result> spGetDBOrderDetail(Nullable<int> salesOrderNO)
        {
            var salesOrderNOParameter = salesOrderNO.HasValue ?
                new ObjectParameter("SalesOrderNO", salesOrderNO) :
                new ObjectParameter("SalesOrderNO", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetDBOrderDetail_Result>("spGetDBOrderDetail", salesOrderNOParameter);
        }
    
        public virtual ObjectResult<spGetOrderList_Result> spGetOrderList(Nullable<int> orderID, Nullable<int> warehouseID)
        {
            var orderIDParameter = orderID.HasValue ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetOrderList_Result>("spGetOrderList", orderIDParameter, warehouseIDParameter);
        }
    
        public virtual ObjectResult<spGetSalesOrder_Result> spGetSalesOrder(Nullable<int> insalesorderno)
        {
            var insalesordernoParameter = insalesorderno.HasValue ?
                new ObjectParameter("insalesorderno", insalesorderno) :
                new ObjectParameter("insalesorderno", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetSalesOrder_Result>("spGetSalesOrder", insalesordernoParameter);
        }
    
        public virtual ObjectResult<spGetSalesOrderNewProduct_Result> spGetSalesOrderNewProduct(Nullable<int> insalesorderno, Nullable<int> inproductid)
        {
            var insalesordernoParameter = insalesorderno.HasValue ?
                new ObjectParameter("insalesorderno", insalesorderno) :
                new ObjectParameter("insalesorderno", typeof(int));
    
            var inproductidParameter = inproductid.HasValue ?
                new ObjectParameter("inproductid", inproductid) :
                new ObjectParameter("inproductid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetSalesOrderNewProduct_Result>("spGetSalesOrderNewProduct", insalesordernoParameter, inproductidParameter);
        }
    
        public virtual ObjectResult<spLoginUser_Result> spLoginUser(Nullable<int> userID, string password)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spLoginUser_Result>("spLoginUser", userIDParameter, passwordParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spLoginUserWorkStation(string userID)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spLoginUserWorkStation", userIDParameter);
        }
    
        public virtual int spProductBalanceDecrease(Nullable<int> productID, Nullable<int> warehouseID, Nullable<int> onHandQuantity, Nullable<int> burstBottleQuantity, Nullable<int> breakageBottleQuantity, Nullable<int> plasticBoxQuantity, Nullable<int> emptyBottleQuantity)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var onHandQuantityParameter = onHandQuantity.HasValue ?
                new ObjectParameter("OnHandQuantity", onHandQuantity) :
                new ObjectParameter("OnHandQuantity", typeof(int));
    
            var burstBottleQuantityParameter = burstBottleQuantity.HasValue ?
                new ObjectParameter("BurstBottleQuantity", burstBottleQuantity) :
                new ObjectParameter("BurstBottleQuantity", typeof(int));
    
            var breakageBottleQuantityParameter = breakageBottleQuantity.HasValue ?
                new ObjectParameter("BreakageBottleQuantity", breakageBottleQuantity) :
                new ObjectParameter("BreakageBottleQuantity", typeof(int));
    
            var plasticBoxQuantityParameter = plasticBoxQuantity.HasValue ?
                new ObjectParameter("PlasticBoxQuantity", plasticBoxQuantity) :
                new ObjectParameter("PlasticBoxQuantity", typeof(int));
    
            var emptyBottleQuantityParameter = emptyBottleQuantity.HasValue ?
                new ObjectParameter("EmptyBottleQuantity", emptyBottleQuantity) :
                new ObjectParameter("EmptyBottleQuantity", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spProductBalanceDecrease", productIDParameter, warehouseIDParameter, onHandQuantityParameter, burstBottleQuantityParameter, breakageBottleQuantityParameter, plasticBoxQuantityParameter, emptyBottleQuantityParameter);
        }
    
        public virtual int spProductBalanceUpdate(Nullable<int> productID, Nullable<int> warehouseID, Nullable<int> onHandQuantity, Nullable<int> burstBottleQuantity, Nullable<int> breakageBottleQuantity, Nullable<int> plasticBoxQuantity, Nullable<int> emptyBottleQuantity)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var onHandQuantityParameter = onHandQuantity.HasValue ?
                new ObjectParameter("OnHandQuantity", onHandQuantity) :
                new ObjectParameter("OnHandQuantity", typeof(int));
    
            var burstBottleQuantityParameter = burstBottleQuantity.HasValue ?
                new ObjectParameter("BurstBottleQuantity", burstBottleQuantity) :
                new ObjectParameter("BurstBottleQuantity", typeof(int));
    
            var breakageBottleQuantityParameter = breakageBottleQuantity.HasValue ?
                new ObjectParameter("BreakageBottleQuantity", breakageBottleQuantity) :
                new ObjectParameter("BreakageBottleQuantity", typeof(int));
    
            var plasticBoxQuantityParameter = plasticBoxQuantity.HasValue ?
                new ObjectParameter("PlasticBoxQuantity", plasticBoxQuantity) :
                new ObjectParameter("PlasticBoxQuantity", typeof(int));
    
            var emptyBottleQuantityParameter = emptyBottleQuantity.HasValue ?
                new ObjectParameter("EmptyBottleQuantity", emptyBottleQuantity) :
                new ObjectParameter("EmptyBottleQuantity", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spProductBalanceUpdate", productIDParameter, warehouseIDParameter, onHandQuantityParameter, burstBottleQuantityParameter, breakageBottleQuantityParameter, plasticBoxQuantityParameter, emptyBottleQuantityParameter);
        }
    
        public virtual int spProductTransaction(Nullable<int> transactionNo, Nullable<int> warehouseID, Nullable<int> transactionTypeID, Nullable<System.DateTime> transactionDate, string referenceNo, string remarks, Nullable<int> toWarehouse, Nullable<int> fromWarehouse, string createdBy, Nullable<System.DateTime> createdDate)
        {
            var transactionNoParameter = transactionNo.HasValue ?
                new ObjectParameter("TransactionNo", transactionNo) :
                new ObjectParameter("TransactionNo", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var transactionTypeIDParameter = transactionTypeID.HasValue ?
                new ObjectParameter("TransactionTypeID", transactionTypeID) :
                new ObjectParameter("TransactionTypeID", typeof(int));
    
            var transactionDateParameter = transactionDate.HasValue ?
                new ObjectParameter("TransactionDate", transactionDate) :
                new ObjectParameter("TransactionDate", typeof(System.DateTime));
    
            var referenceNoParameter = referenceNo != null ?
                new ObjectParameter("ReferenceNo", referenceNo) :
                new ObjectParameter("ReferenceNo", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var toWarehouseParameter = toWarehouse.HasValue ?
                new ObjectParameter("ToWarehouse", toWarehouse) :
                new ObjectParameter("ToWarehouse", typeof(int));
    
            var fromWarehouseParameter = fromWarehouse.HasValue ?
                new ObjectParameter("FromWarehouse", fromWarehouse) :
                new ObjectParameter("FromWarehouse", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spProductTransaction", transactionNoParameter, warehouseIDParameter, transactionTypeIDParameter, transactionDateParameter, referenceNoParameter, remarksParameter, toWarehouseParameter, fromWarehouseParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual int spQRCodeInfoEntry(string rType, string rVehicleType, Nullable<int> rAgencyID, string rVehicleNumber, string rDriverName, string rDriverMobileNumber, Nullable<int> rTruckCapacity, ObjectParameter rSLNO, ObjectParameter rQRSLNO)
        {
            var rTypeParameter = rType != null ?
                new ObjectParameter("rType", rType) :
                new ObjectParameter("rType", typeof(string));
    
            var rVehicleTypeParameter = rVehicleType != null ?
                new ObjectParameter("rVehicleType", rVehicleType) :
                new ObjectParameter("rVehicleType", typeof(string));
    
            var rAgencyIDParameter = rAgencyID.HasValue ?
                new ObjectParameter("rAgencyID", rAgencyID) :
                new ObjectParameter("rAgencyID", typeof(int));
    
            var rVehicleNumberParameter = rVehicleNumber != null ?
                new ObjectParameter("rVehicleNumber", rVehicleNumber) :
                new ObjectParameter("rVehicleNumber", typeof(string));
    
            var rDriverNameParameter = rDriverName != null ?
                new ObjectParameter("rDriverName", rDriverName) :
                new ObjectParameter("rDriverName", typeof(string));
    
            var rDriverMobileNumberParameter = rDriverMobileNumber != null ?
                new ObjectParameter("rDriverMobileNumber", rDriverMobileNumber) :
                new ObjectParameter("rDriverMobileNumber", typeof(string));
    
            var rTruckCapacityParameter = rTruckCapacity.HasValue ?
                new ObjectParameter("rTruckCapacity", rTruckCapacity) :
                new ObjectParameter("rTruckCapacity", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spQRCodeInfoEntry", rTypeParameter, rVehicleTypeParameter, rAgencyIDParameter, rVehicleNumberParameter, rDriverNameParameter, rDriverMobileNumberParameter, rTruckCapacityParameter, rSLNO, rQRSLNO);
        }
    
        public virtual ObjectResult<spRPTPaymentStatusWithMoneyReceiptNormalCustomer_Result> spRPTPaymentStatusWithMoneyReceiptNormalCustomer(Nullable<System.DateTime> beginingDate, Nullable<System.DateTime> endingDate)
        {
            var beginingDateParameter = beginingDate.HasValue ?
                new ObjectParameter("BeginingDate", beginingDate) :
                new ObjectParameter("BeginingDate", typeof(System.DateTime));
    
            var endingDateParameter = endingDate.HasValue ?
                new ObjectParameter("EndingDate", endingDate) :
                new ObjectParameter("EndingDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRPTPaymentStatusWithMoneyReceiptNormalCustomer_Result>("spRPTPaymentStatusWithMoneyReceiptNormalCustomer", beginingDateParameter, endingDateParameter);
        }
    
        public virtual ObjectResult<spRPTPaymentStatusWithMoneyReceiptNormalCustomer_PaymentModeWise_Result> spRPTPaymentStatusWithMoneyReceiptNormalCustomer_PaymentModeWise(Nullable<System.DateTime> beginingDate, Nullable<System.DateTime> endingDate, Nullable<int> warehouseID, string paymentMode)
        {
            var beginingDateParameter = beginingDate.HasValue ?
                new ObjectParameter("BeginingDate", beginingDate) :
                new ObjectParameter("BeginingDate", typeof(System.DateTime));
    
            var endingDateParameter = endingDate.HasValue ?
                new ObjectParameter("EndingDate", endingDate) :
                new ObjectParameter("EndingDate", typeof(System.DateTime));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var paymentModeParameter = paymentMode != null ?
                new ObjectParameter("PaymentMode", paymentMode) :
                new ObjectParameter("PaymentMode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRPTPaymentStatusWithMoneyReceiptNormalCustomer_PaymentModeWise_Result>("spRPTPaymentStatusWithMoneyReceiptNormalCustomer_PaymentModeWise", beginingDateParameter, endingDateParameter, warehouseIDParameter, paymentModeParameter);
        }
    
        public virtual ObjectResult<spRPTPaymentStatusWithMoneyReceiptNormalCustomerWise_Result> spRPTPaymentStatusWithMoneyReceiptNormalCustomerWise(Nullable<System.DateTime> beginingDate, Nullable<System.DateTime> endingDate, Nullable<int> customer)
        {
            var beginingDateParameter = beginingDate.HasValue ?
                new ObjectParameter("BeginingDate", beginingDate) :
                new ObjectParameter("BeginingDate", typeof(System.DateTime));
    
            var endingDateParameter = endingDate.HasValue ?
                new ObjectParameter("EndingDate", endingDate) :
                new ObjectParameter("EndingDate", typeof(System.DateTime));
    
            var customerParameter = customer.HasValue ?
                new ObjectParameter("Customer", customer) :
                new ObjectParameter("Customer", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRPTPaymentStatusWithMoneyReceiptNormalCustomerWise_Result>("spRPTPaymentStatusWithMoneyReceiptNormalCustomerWise", beginingDateParameter, endingDateParameter, customerParameter);
        }
    
        public virtual ObjectResult<spRPTProductBalance_WarehouseWise_Result> spRPTProductBalance_WarehouseWise(Nullable<int> warehouseID)
        {
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRPTProductBalance_WarehouseWise_Result>("spRPTProductBalance_WarehouseWise", warehouseIDParameter);
        }
    
        public virtual int spStockBatch(Nullable<int> batchNo, Nullable<int> warehouseID, Nullable<int> productID, Nullable<int> plantLineNo, Nullable<System.DateTime> manufacturDate, Nullable<System.DateTime> expiryDate, Nullable<int> issueQuantity, Nullable<int> salesQty, Nullable<int> burstQty, Nullable<int> breakageQty, Nullable<int> receivedQty, Nullable<int> replaceQty, Nullable<int> adjustQty, Nullable<int> marketReturnQty)
        {
            var batchNoParameter = batchNo.HasValue ?
                new ObjectParameter("BatchNo", batchNo) :
                new ObjectParameter("BatchNo", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var plantLineNoParameter = plantLineNo.HasValue ?
                new ObjectParameter("PlantLineNo", plantLineNo) :
                new ObjectParameter("PlantLineNo", typeof(int));
    
            var manufacturDateParameter = manufacturDate.HasValue ?
                new ObjectParameter("ManufacturDate", manufacturDate) :
                new ObjectParameter("ManufacturDate", typeof(System.DateTime));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            var issueQuantityParameter = issueQuantity.HasValue ?
                new ObjectParameter("IssueQuantity", issueQuantity) :
                new ObjectParameter("IssueQuantity", typeof(int));
    
            var salesQtyParameter = salesQty.HasValue ?
                new ObjectParameter("SalesQty", salesQty) :
                new ObjectParameter("SalesQty", typeof(int));
    
            var burstQtyParameter = burstQty.HasValue ?
                new ObjectParameter("BurstQty", burstQty) :
                new ObjectParameter("BurstQty", typeof(int));
    
            var breakageQtyParameter = breakageQty.HasValue ?
                new ObjectParameter("BreakageQty", breakageQty) :
                new ObjectParameter("BreakageQty", typeof(int));
    
            var receivedQtyParameter = receivedQty.HasValue ?
                new ObjectParameter("ReceivedQty", receivedQty) :
                new ObjectParameter("ReceivedQty", typeof(int));
    
            var replaceQtyParameter = replaceQty.HasValue ?
                new ObjectParameter("ReplaceQty", replaceQty) :
                new ObjectParameter("ReplaceQty", typeof(int));
    
            var adjustQtyParameter = adjustQty.HasValue ?
                new ObjectParameter("AdjustQty", adjustQty) :
                new ObjectParameter("AdjustQty", typeof(int));
    
            var marketReturnQtyParameter = marketReturnQty.HasValue ?
                new ObjectParameter("MarketReturnQty", marketReturnQty) :
                new ObjectParameter("MarketReturnQty", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spStockBatch", batchNoParameter, warehouseIDParameter, productIDParameter, plantLineNoParameter, manufacturDateParameter, expiryDateParameter, issueQuantityParameter, salesQtyParameter, burstQtyParameter, breakageQtyParameter, receivedQtyParameter, replaceQtyParameter, adjustQtyParameter, marketReturnQtyParameter);
        }
    
        public virtual int spStockUpdated(Nullable<int> productID, Nullable<byte> warehouseID, Nullable<int> onHandQuantity, Nullable<int> burstBottleQuantity, Nullable<int> breakageBottleQuantity, Nullable<int> plasticBoxQuantity, Nullable<int> emptyBottleQuantity, Nullable<int> batchNo, Nullable<int> plantNo)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(byte));
    
            var onHandQuantityParameter = onHandQuantity.HasValue ?
                new ObjectParameter("OnHandQuantity", onHandQuantity) :
                new ObjectParameter("OnHandQuantity", typeof(int));
    
            var burstBottleQuantityParameter = burstBottleQuantity.HasValue ?
                new ObjectParameter("BurstBottleQuantity", burstBottleQuantity) :
                new ObjectParameter("BurstBottleQuantity", typeof(int));
    
            var breakageBottleQuantityParameter = breakageBottleQuantity.HasValue ?
                new ObjectParameter("BreakageBottleQuantity", breakageBottleQuantity) :
                new ObjectParameter("BreakageBottleQuantity", typeof(int));
    
            var plasticBoxQuantityParameter = plasticBoxQuantity.HasValue ?
                new ObjectParameter("PlasticBoxQuantity", plasticBoxQuantity) :
                new ObjectParameter("PlasticBoxQuantity", typeof(int));
    
            var emptyBottleQuantityParameter = emptyBottleQuantity.HasValue ?
                new ObjectParameter("EmptyBottleQuantity", emptyBottleQuantity) :
                new ObjectParameter("EmptyBottleQuantity", typeof(int));
    
            var batchNoParameter = batchNo.HasValue ?
                new ObjectParameter("BatchNo", batchNo) :
                new ObjectParameter("BatchNo", typeof(int));
    
            var plantNoParameter = plantNo.HasValue ?
                new ObjectParameter("PlantNo", plantNo) :
                new ObjectParameter("PlantNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spStockUpdated", productIDParameter, warehouseIDParameter, onHandQuantityParameter, burstBottleQuantityParameter, breakageBottleQuantityParameter, plasticBoxQuantityParameter, emptyBottleQuantityParameter, batchNoParameter, plantNoParameter);
        }
    
        public virtual ObjectResult<spUserInformation_Result> spUserInformation(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spUserInformation_Result>("spUserInformation", userIDParameter);
        }
    
        public virtual ObjectResult<spRPTCreditLimit_Result> spRPTCreditLimit(Nullable<int> warehouseId)
        {
            var warehouseIdParameter = warehouseId.HasValue ?
                new ObjectParameter("WarehouseId", warehouseId) :
                new ObjectParameter("WarehouseId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRPTCreditLimit_Result>("spRPTCreditLimit", warehouseIdParameter);
        }
    
        public virtual ObjectResult<spRPTDelivery_Result> spRPTDelivery(Nullable<System.DateTime> beginingDate, Nullable<System.DateTime> endingDate, Nullable<int> warehouseId)
        {
            var beginingDateParameter = beginingDate.HasValue ?
                new ObjectParameter("BeginingDate", beginingDate) :
                new ObjectParameter("BeginingDate", typeof(System.DateTime));
    
            var endingDateParameter = endingDate.HasValue ?
                new ObjectParameter("EndingDate", endingDate) :
                new ObjectParameter("EndingDate", typeof(System.DateTime));
    
            var warehouseIdParameter = warehouseId.HasValue ?
                new ObjectParameter("WarehouseId", warehouseId) :
                new ObjectParameter("WarehouseId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRPTDelivery_Result>("spRPTDelivery", beginingDateParameter, endingDateParameter, warehouseIdParameter);
        }
    
        public virtual int spInsertHireTruckFare(Nullable<int> warehouseID, Nullable<int> challanNumber, Nullable<int> tAID, Nullable<System.DateTime> challanDate, string customerName, string address, string vechileNo, Nullable<decimal> fareAmnt, Nullable<decimal> extraAmount, Nullable<decimal> totalCases, string status, string enteredBy, Nullable<System.DateTime> enteredDate, string remarks)
        {
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var challanNumberParameter = challanNumber.HasValue ?
                new ObjectParameter("ChallanNumber", challanNumber) :
                new ObjectParameter("ChallanNumber", typeof(int));
    
            var tAIDParameter = tAID.HasValue ?
                new ObjectParameter("TAID", tAID) :
                new ObjectParameter("TAID", typeof(int));
    
            var challanDateParameter = challanDate.HasValue ?
                new ObjectParameter("ChallanDate", challanDate) :
                new ObjectParameter("ChallanDate", typeof(System.DateTime));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var vechileNoParameter = vechileNo != null ?
                new ObjectParameter("VechileNo", vechileNo) :
                new ObjectParameter("VechileNo", typeof(string));
    
            var fareAmntParameter = fareAmnt.HasValue ?
                new ObjectParameter("FareAmnt", fareAmnt) :
                new ObjectParameter("FareAmnt", typeof(decimal));
    
            var extraAmountParameter = extraAmount.HasValue ?
                new ObjectParameter("ExtraAmount", extraAmount) :
                new ObjectParameter("ExtraAmount", typeof(decimal));
    
            var totalCasesParameter = totalCases.HasValue ?
                new ObjectParameter("TotalCases", totalCases) :
                new ObjectParameter("TotalCases", typeof(decimal));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var enteredByParameter = enteredBy != null ?
                new ObjectParameter("EnteredBy", enteredBy) :
                new ObjectParameter("EnteredBy", typeof(string));
    
            var enteredDateParameter = enteredDate.HasValue ?
                new ObjectParameter("EnteredDate", enteredDate) :
                new ObjectParameter("EnteredDate", typeof(System.DateTime));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertHireTruckFare", warehouseIDParameter, challanNumberParameter, tAIDParameter, challanDateParameter, customerNameParameter, addressParameter, vechileNoParameter, fareAmntParameter, extraAmountParameter, totalCasesParameter, statusParameter, enteredByParameter, enteredDateParameter, remarksParameter);
        }
    
        public virtual int spOrderBankSumUpdate(Nullable<int> insalesorderno, Nullable<int> inwarehouseID, string instatus)
        {
            var insalesordernoParameter = insalesorderno.HasValue ?
                new ObjectParameter("insalesorderno", insalesorderno) :
                new ObjectParameter("insalesorderno", typeof(int));
    
            var inwarehouseIDParameter = inwarehouseID.HasValue ?
                new ObjectParameter("inwarehouseID", inwarehouseID) :
                new ObjectParameter("inwarehouseID", typeof(int));
    
            var instatusParameter = instatus != null ?
                new ObjectParameter("instatus", instatus) :
                new ObjectParameter("instatus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spOrderBankSumUpdate", insalesordernoParameter, inwarehouseIDParameter, instatusParameter);
        }
    
        public virtual ObjectResult<spGetTransportFareSetupChallanInfo_Result> spGetTransportFareSetupChallanInfo(Nullable<int> challanNumber)
        {
            var challanNumberParameter = challanNumber.HasValue ?
                new ObjectParameter("ChallanNumber", challanNumber) :
                new ObjectParameter("ChallanNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetTransportFareSetupChallanInfo_Result>("spGetTransportFareSetupChallanInfo", challanNumberParameter);
        }
    
        public virtual ObjectResult<spRPTQRReport_Result> spRPTQRReport(Nullable<int> sLNO)
        {
            var sLNOParameter = sLNO.HasValue ?
                new ObjectParameter("SLNO", sLNO) :
                new ObjectParameter("SLNO", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRPTQRReport_Result>("spRPTQRReport", sLNOParameter);
        }
    
        public virtual int spOrderUpdateAfterInvoice(Nullable<int> warehouseID, Nullable<int> orderID, string delivered, Nullable<System.DateTime> deliveryChallanDate, Nullable<decimal> salesAmount, Nullable<decimal> securityAmount, Nullable<decimal> rebateAmount, Nullable<decimal> agencyCommission, Nullable<int> challanNumber, string deliveredBy, Nullable<int> cashSettlementID, string readyForDelivery, Nullable<decimal> finishGoodsUnloadCharge, string updateBy, Nullable<System.DateTime> updateDate, string advanceOrder)
        {
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var orderIDParameter = orderID.HasValue ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(int));
    
            var deliveredParameter = delivered != null ?
                new ObjectParameter("Delivered", delivered) :
                new ObjectParameter("Delivered", typeof(string));
    
            var deliveryChallanDateParameter = deliveryChallanDate.HasValue ?
                new ObjectParameter("DeliveryChallanDate", deliveryChallanDate) :
                new ObjectParameter("DeliveryChallanDate", typeof(System.DateTime));
    
            var salesAmountParameter = salesAmount.HasValue ?
                new ObjectParameter("SalesAmount", salesAmount) :
                new ObjectParameter("SalesAmount", typeof(decimal));
    
            var securityAmountParameter = securityAmount.HasValue ?
                new ObjectParameter("SecurityAmount", securityAmount) :
                new ObjectParameter("SecurityAmount", typeof(decimal));
    
            var rebateAmountParameter = rebateAmount.HasValue ?
                new ObjectParameter("RebateAmount", rebateAmount) :
                new ObjectParameter("RebateAmount", typeof(decimal));
    
            var agencyCommissionParameter = agencyCommission.HasValue ?
                new ObjectParameter("AgencyCommission", agencyCommission) :
                new ObjectParameter("AgencyCommission", typeof(decimal));
    
            var challanNumberParameter = challanNumber.HasValue ?
                new ObjectParameter("ChallanNumber", challanNumber) :
                new ObjectParameter("ChallanNumber", typeof(int));
    
            var deliveredByParameter = deliveredBy != null ?
                new ObjectParameter("DeliveredBy", deliveredBy) :
                new ObjectParameter("DeliveredBy", typeof(string));
    
            var cashSettlementIDParameter = cashSettlementID.HasValue ?
                new ObjectParameter("CashSettlementID", cashSettlementID) :
                new ObjectParameter("CashSettlementID", typeof(int));
    
            var readyForDeliveryParameter = readyForDelivery != null ?
                new ObjectParameter("ReadyForDelivery", readyForDelivery) :
                new ObjectParameter("ReadyForDelivery", typeof(string));
    
            var finishGoodsUnloadChargeParameter = finishGoodsUnloadCharge.HasValue ?
                new ObjectParameter("FinishGoodsUnloadCharge", finishGoodsUnloadCharge) :
                new ObjectParameter("FinishGoodsUnloadCharge", typeof(decimal));
    
            var updateByParameter = updateBy != null ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(string));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var advanceOrderParameter = advanceOrder != null ?
                new ObjectParameter("AdvanceOrder", advanceOrder) :
                new ObjectParameter("AdvanceOrder", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spOrderUpdateAfterInvoice", warehouseIDParameter, orderIDParameter, deliveredParameter, deliveryChallanDateParameter, salesAmountParameter, securityAmountParameter, rebateAmountParameter, agencyCommissionParameter, challanNumberParameter, deliveredByParameter, cashSettlementIDParameter, readyForDeliveryParameter, finishGoodsUnloadChargeParameter, updateByParameter, updateDateParameter, advanceOrderParameter);
        }
    
        public virtual ObjectResult<spRPTHreTruckFare_Result> spRPTHreTruckFare(Nullable<System.DateTime> beginingDate, Nullable<System.DateTime> endingDate, Nullable<int> warehouseID, Nullable<int> agencyId, string stat)
        {
            var beginingDateParameter = beginingDate.HasValue ?
                new ObjectParameter("BeginingDate", beginingDate) :
                new ObjectParameter("BeginingDate", typeof(System.DateTime));
    
            var endingDateParameter = endingDate.HasValue ?
                new ObjectParameter("EndingDate", endingDate) :
                new ObjectParameter("EndingDate", typeof(System.DateTime));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var agencyIdParameter = agencyId.HasValue ?
                new ObjectParameter("AgencyId", agencyId) :
                new ObjectParameter("AgencyId", typeof(int));
    
            var statParameter = stat != null ?
                new ObjectParameter("Stat", stat) :
                new ObjectParameter("Stat", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRPTHreTruckFare_Result>("spRPTHreTruckFare", beginingDateParameter, endingDateParameter, warehouseIDParameter, agencyIdParameter, statParameter);
        }
    
        public virtual ObjectResult<spRPTruckMovementQR_Result> spRPTruckMovementQR(Nullable<System.DateTime> beginingDate, Nullable<System.DateTime> endingDate, Nullable<int> warehouseID, Nullable<int> agencyId)
        {
            var beginingDateParameter = beginingDate.HasValue ?
                new ObjectParameter("BeginingDate", beginingDate) :
                new ObjectParameter("BeginingDate", typeof(System.DateTime));
    
            var endingDateParameter = endingDate.HasValue ?
                new ObjectParameter("EndingDate", endingDate) :
                new ObjectParameter("EndingDate", typeof(System.DateTime));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var agencyIdParameter = agencyId.HasValue ?
                new ObjectParameter("AgencyId", agencyId) :
                new ObjectParameter("AgencyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRPTruckMovementQR_Result>("spRPTruckMovementQR", beginingDateParameter, endingDateParameter, warehouseIDParameter, agencyIdParameter);
        }
    
        public virtual ObjectResult<spGetOrderInfo_Result> spGetOrderInfo(Nullable<int> warehouseID)
        {
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetOrderInfo_Result>("spGetOrderInfo", warehouseIDParameter);
        }
    
        public virtual ObjectResult<spGetReturnProduct_Result> spGetReturnProduct(Nullable<int> pWarehouse, Nullable<int> pCustomer, Nullable<System.DateTime> pFromdate, Nullable<System.DateTime> pTodate)
        {
            var pWarehouseParameter = pWarehouse.HasValue ?
                new ObjectParameter("pWarehouse", pWarehouse) :
                new ObjectParameter("pWarehouse", typeof(int));
    
            var pCustomerParameter = pCustomer.HasValue ?
                new ObjectParameter("pCustomer", pCustomer) :
                new ObjectParameter("pCustomer", typeof(int));
    
            var pFromdateParameter = pFromdate.HasValue ?
                new ObjectParameter("pFromdate", pFromdate) :
                new ObjectParameter("pFromdate", typeof(System.DateTime));
    
            var pTodateParameter = pTodate.HasValue ?
                new ObjectParameter("pTodate", pTodate) :
                new ObjectParameter("pTodate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetReturnProduct_Result>("spGetReturnProduct", pWarehouseParameter, pCustomerParameter, pFromdateParameter, pTodateParameter);
        }
    
        public virtual int spRelaceDataUpdate(Nullable<int> inReplaceNo, Nullable<int> inWarehouseID, string inStatus, Nullable<int> inCustomerID, string inCode, string inUpdateBy, Nullable<System.DateTime> inUpdatedate)
        {
            var inReplaceNoParameter = inReplaceNo.HasValue ?
                new ObjectParameter("inReplaceNo", inReplaceNo) :
                new ObjectParameter("inReplaceNo", typeof(int));
    
            var inWarehouseIDParameter = inWarehouseID.HasValue ?
                new ObjectParameter("inWarehouseID", inWarehouseID) :
                new ObjectParameter("inWarehouseID", typeof(int));
    
            var inStatusParameter = inStatus != null ?
                new ObjectParameter("inStatus", inStatus) :
                new ObjectParameter("inStatus", typeof(string));
    
            var inCustomerIDParameter = inCustomerID.HasValue ?
                new ObjectParameter("inCustomerID", inCustomerID) :
                new ObjectParameter("inCustomerID", typeof(int));
    
            var inCodeParameter = inCode != null ?
                new ObjectParameter("inCode", inCode) :
                new ObjectParameter("inCode", typeof(string));
    
            var inUpdateByParameter = inUpdateBy != null ?
                new ObjectParameter("inUpdateBy", inUpdateBy) :
                new ObjectParameter("inUpdateBy", typeof(string));
    
            var inUpdatedateParameter = inUpdatedate.HasValue ?
                new ObjectParameter("inUpdatedate", inUpdatedate) :
                new ObjectParameter("inUpdatedate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spRelaceDataUpdate", inReplaceNoParameter, inWarehouseIDParameter, inStatusParameter, inCustomerIDParameter, inCodeParameter, inUpdateByParameter, inUpdatedateParameter);
        }
    
        public virtual int spCustomerBalanceUpdate(Nullable<int> pCustomerID, string pDrCr, Nullable<decimal> pAmount)
        {
            var pCustomerIDParameter = pCustomerID.HasValue ?
                new ObjectParameter("PCustomerID", pCustomerID) :
                new ObjectParameter("PCustomerID", typeof(int));
    
            var pDrCrParameter = pDrCr != null ?
                new ObjectParameter("PDrCr", pDrCr) :
                new ObjectParameter("PDrCr", typeof(string));
    
            var pAmountParameter = pAmount.HasValue ?
                new ObjectParameter("PAmount", pAmount) :
                new ObjectParameter("PAmount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCustomerBalanceUpdate", pCustomerIDParameter, pDrCrParameter, pAmountParameter);
        }
    
        public virtual ObjectResult<spGetReturnProductdata_Result> spGetReturnProductdata(Nullable<int> pWarehouse, Nullable<int> pCustomer, Nullable<System.DateTime> pFromdate, Nullable<System.DateTime> pTodate)
        {
            var pWarehouseParameter = pWarehouse.HasValue ?
                new ObjectParameter("pWarehouse", pWarehouse) :
                new ObjectParameter("pWarehouse", typeof(int));
    
            var pCustomerParameter = pCustomer.HasValue ?
                new ObjectParameter("pCustomer", pCustomer) :
                new ObjectParameter("pCustomer", typeof(int));
    
            var pFromdateParameter = pFromdate.HasValue ?
                new ObjectParameter("pFromdate", pFromdate) :
                new ObjectParameter("pFromdate", typeof(System.DateTime));
    
            var pTodateParameter = pTodate.HasValue ?
                new ObjectParameter("pTodate", pTodate) :
                new ObjectParameter("pTodate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetReturnProductdata_Result>("spGetReturnProductdata", pWarehouseParameter, pCustomerParameter, pFromdateParameter, pTodateParameter);
        }
    
        public virtual ObjectResult<spGetOrderDataGridNew_Result> spGetOrderDataGridNew(Nullable<int> orderID, Nullable<int> warehouseID)
        {
            var orderIDParameter = orderID.HasValue ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetOrderDataGridNew_Result>("spGetOrderDataGridNew", orderIDParameter, warehouseIDParameter);
        }
    
        public virtual int spRPTInvoiceNew(Nullable<int> salesOrderNo)
        {
            var salesOrderNoParameter = salesOrderNo.HasValue ?
                new ObjectParameter("SalesOrderNo", salesOrderNo) :
                new ObjectParameter("SalesOrderNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spRPTInvoiceNew", salesOrderNoParameter);
        }
    
        public virtual ObjectResult<spRPTProductRateWiseDailySales_Result> spRPTProductRateWiseDailySales(Nullable<System.DateTime> beginingDate, Nullable<System.DateTime> endingDate, Nullable<int> warehouseId)
        {
            var beginingDateParameter = beginingDate.HasValue ?
                new ObjectParameter("BeginingDate", beginingDate) :
                new ObjectParameter("BeginingDate", typeof(System.DateTime));
    
            var endingDateParameter = endingDate.HasValue ?
                new ObjectParameter("EndingDate", endingDate) :
                new ObjectParameter("EndingDate", typeof(System.DateTime));
    
            var warehouseIdParameter = warehouseId.HasValue ?
                new ObjectParameter("WarehouseId", warehouseId) :
                new ObjectParameter("WarehouseId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRPTProductRateWiseDailySales_Result>("spRPTProductRateWiseDailySales", beginingDateParameter, endingDateParameter, warehouseIdParameter);
        }
    
        public virtual ObjectResult<sprptMoneyreceiptCR_Result> sprptMoneyreceiptCR(Nullable<int> warehouseID, Nullable<int> moneyReceiptNo)
        {
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var moneyReceiptNoParameter = moneyReceiptNo.HasValue ?
                new ObjectParameter("MoneyReceiptNo", moneyReceiptNo) :
                new ObjectParameter("MoneyReceiptNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sprptMoneyreceiptCR_Result>("sprptMoneyreceiptCR", warehouseIDParameter, moneyReceiptNoParameter);
        }
    
        public virtual ObjectResult<spRPTProductTransferNote_Result> spRPTProductTransferNote(Nullable<int> transactionNo, Nullable<int> transactionTypeID)
        {
            var transactionNoParameter = transactionNo.HasValue ?
                new ObjectParameter("TransactionNo", transactionNo) :
                new ObjectParameter("TransactionNo", typeof(int));
    
            var transactionTypeIDParameter = transactionTypeID.HasValue ?
                new ObjectParameter("TransactionTypeID", transactionTypeID) :
                new ObjectParameter("TransactionTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRPTProductTransferNote_Result>("spRPTProductTransferNote", transactionNoParameter, transactionTypeIDParameter);
        }
    
        public virtual ObjectResult<spRPTPaymentStatusWithMoneyReceiptNormalCustomer_WarehouseWise_Result> spRPTPaymentStatusWithMoneyReceiptNormalCustomer_WarehouseWise(Nullable<System.DateTime> beginingDate, Nullable<System.DateTime> endingDate, Nullable<int> warehouseID)
        {
            var beginingDateParameter = beginingDate.HasValue ?
                new ObjectParameter("BeginingDate", beginingDate) :
                new ObjectParameter("BeginingDate", typeof(System.DateTime));
    
            var endingDateParameter = endingDate.HasValue ?
                new ObjectParameter("EndingDate", endingDate) :
                new ObjectParameter("EndingDate", typeof(System.DateTime));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRPTPaymentStatusWithMoneyReceiptNormalCustomer_WarehouseWise_Result>("spRPTPaymentStatusWithMoneyReceiptNormalCustomer_WarehouseWise", beginingDateParameter, endingDateParameter, warehouseIDParameter);
        }
    
        public virtual ObjectResult<spGetOrderDataGrid_Result> spGetOrderDataGrid(Nullable<int> orderID, Nullable<int> warehouseID)
        {
            var orderIDParameter = orderID.HasValue ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetOrderDataGrid_Result>("spGetOrderDataGrid", orderIDParameter, warehouseIDParameter);
        }
    
        public virtual ObjectResult<spGetDBProductTransactionProduct_Result> spGetDBProductTransactionProduct(Nullable<int> inWarehouse, Nullable<int> inTransactionNo)
        {
            var inWarehouseParameter = inWarehouse.HasValue ?
                new ObjectParameter("inWarehouse", inWarehouse) :
                new ObjectParameter("inWarehouse", typeof(int));
    
            var inTransactionNoParameter = inTransactionNo.HasValue ?
                new ObjectParameter("inTransactionNo", inTransactionNo) :
                new ObjectParameter("inTransactionNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetDBProductTransactionProduct_Result>("spGetDBProductTransactionProduct", inWarehouseParameter, inTransactionNoParameter);
        }
    
        public virtual ObjectResult<spRPTProductTransaction_WarehouseWise_Result> spRPTProductTransaction_WarehouseWise(Nullable<int> warehouseID, Nullable<System.DateTime> beginingDate, Nullable<System.DateTime> endingDate, Nullable<int> trType)
        {
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var beginingDateParameter = beginingDate.HasValue ?
                new ObjectParameter("BeginingDate", beginingDate) :
                new ObjectParameter("BeginingDate", typeof(System.DateTime));
    
            var endingDateParameter = endingDate.HasValue ?
                new ObjectParameter("EndingDate", endingDate) :
                new ObjectParameter("EndingDate", typeof(System.DateTime));
    
            var trTypeParameter = trType.HasValue ?
                new ObjectParameter("TrType", trType) :
                new ObjectParameter("TrType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRPTProductTransaction_WarehouseWise_Result>("spRPTProductTransaction_WarehouseWise", warehouseIDParameter, beginingDateParameter, endingDateParameter, trTypeParameter);
        }
    
        public virtual ObjectResult<spRPTCustomerWarehouseWiseSales_Result> spRPTCustomerWarehouseWiseSales(Nullable<System.DateTime> beginingDate, Nullable<System.DateTime> endingDate, Nullable<int> warehouseId, Nullable<int> customerId)
        {
            var beginingDateParameter = beginingDate.HasValue ?
                new ObjectParameter("BeginingDate", beginingDate) :
                new ObjectParameter("BeginingDate", typeof(System.DateTime));
    
            var endingDateParameter = endingDate.HasValue ?
                new ObjectParameter("EndingDate", endingDate) :
                new ObjectParameter("EndingDate", typeof(System.DateTime));
    
            var warehouseIdParameter = warehouseId.HasValue ?
                new ObjectParameter("WarehouseId", warehouseId) :
                new ObjectParameter("WarehouseId", typeof(int));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRPTCustomerWarehouseWiseSales_Result>("spRPTCustomerWarehouseWiseSales", beginingDateParameter, endingDateParameter, warehouseIdParameter, customerIdParameter);
        }
    
        public virtual ObjectResult<spRPTCustomerSKUWiseWarehouseWiseSales_Result> spRPTCustomerSKUWiseWarehouseWiseSales(Nullable<int> cType, Nullable<System.DateTime> beginingDate, Nullable<System.DateTime> endingDate, Nullable<int> warehouseId)
        {
            var cTypeParameter = cType.HasValue ?
                new ObjectParameter("CType", cType) :
                new ObjectParameter("CType", typeof(int));
    
            var beginingDateParameter = beginingDate.HasValue ?
                new ObjectParameter("BeginingDate", beginingDate) :
                new ObjectParameter("BeginingDate", typeof(System.DateTime));
    
            var endingDateParameter = endingDate.HasValue ?
                new ObjectParameter("EndingDate", endingDate) :
                new ObjectParameter("EndingDate", typeof(System.DateTime));
    
            var warehouseIdParameter = warehouseId.HasValue ?
                new ObjectParameter("WarehouseId", warehouseId) :
                new ObjectParameter("WarehouseId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRPTCustomerSKUWiseWarehouseWiseSales_Result>("spRPTCustomerSKUWiseWarehouseWiseSales", cTypeParameter, beginingDateParameter, endingDateParameter, warehouseIdParameter);
        }
    
        public virtual ObjectResult<spGetPOSMIssueChallan_Result> spGetPOSMIssueChallan(Nullable<int> cHNO)
        {
            var cHNOParameter = cHNO.HasValue ?
                new ObjectParameter("CHNO", cHNO) :
                new ObjectParameter("CHNO", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetPOSMIssueChallan_Result>("spGetPOSMIssueChallan", cHNOParameter);
        }
    
        public virtual int spUpdateDBsInvoiceValue(Nullable<int> pCustomerID, string pFlag, Nullable<decimal> pCurrBal, Nullable<decimal> pOutstandingAmt, Nullable<decimal> pInvoiceAmt, Nullable<decimal> pBookedAmt, Nullable<decimal> pSequrityReceive, Nullable<decimal> pChargeAmount, Nullable<decimal> pFareAmount, Nullable<decimal> pRebateAmt, Nullable<int> pInvoiceNo)
        {
            var pCustomerIDParameter = pCustomerID.HasValue ?
                new ObjectParameter("PCustomerID", pCustomerID) :
                new ObjectParameter("PCustomerID", typeof(int));
    
            var pFlagParameter = pFlag != null ?
                new ObjectParameter("PFlag", pFlag) :
                new ObjectParameter("PFlag", typeof(string));
    
            var pCurrBalParameter = pCurrBal.HasValue ?
                new ObjectParameter("PCurrBal", pCurrBal) :
                new ObjectParameter("PCurrBal", typeof(decimal));
    
            var pOutstandingAmtParameter = pOutstandingAmt.HasValue ?
                new ObjectParameter("POutstandingAmt", pOutstandingAmt) :
                new ObjectParameter("POutstandingAmt", typeof(decimal));
    
            var pInvoiceAmtParameter = pInvoiceAmt.HasValue ?
                new ObjectParameter("PInvoiceAmt", pInvoiceAmt) :
                new ObjectParameter("PInvoiceAmt", typeof(decimal));
    
            var pBookedAmtParameter = pBookedAmt.HasValue ?
                new ObjectParameter("PBookedAmt", pBookedAmt) :
                new ObjectParameter("PBookedAmt", typeof(decimal));
    
            var pSequrityReceiveParameter = pSequrityReceive.HasValue ?
                new ObjectParameter("PSequrityReceive", pSequrityReceive) :
                new ObjectParameter("PSequrityReceive", typeof(decimal));
    
            var pChargeAmountParameter = pChargeAmount.HasValue ?
                new ObjectParameter("PChargeAmount", pChargeAmount) :
                new ObjectParameter("PChargeAmount", typeof(decimal));
    
            var pFareAmountParameter = pFareAmount.HasValue ?
                new ObjectParameter("PFareAmount", pFareAmount) :
                new ObjectParameter("PFareAmount", typeof(decimal));
    
            var pRebateAmtParameter = pRebateAmt.HasValue ?
                new ObjectParameter("pRebateAmt", pRebateAmt) :
                new ObjectParameter("pRebateAmt", typeof(decimal));
    
            var pInvoiceNoParameter = pInvoiceNo.HasValue ?
                new ObjectParameter("PInvoiceNo", pInvoiceNo) :
                new ObjectParameter("PInvoiceNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateDBsInvoiceValue", pCustomerIDParameter, pFlagParameter, pCurrBalParameter, pOutstandingAmtParameter, pInvoiceAmtParameter, pBookedAmtParameter, pSequrityReceiveParameter, pChargeAmountParameter, pFareAmountParameter, pRebateAmtParameter, pInvoiceNoParameter);
        }
    
        public virtual ObjectResult<spRPTPOSMReceiveIsuueDateWise_Result> spRPTPOSMReceiveIsuueDateWise(Nullable<System.DateTime> beginingDate, Nullable<System.DateTime> endingDate, Nullable<int> warehouseId)
        {
            var beginingDateParameter = beginingDate.HasValue ?
                new ObjectParameter("BeginingDate", beginingDate) :
                new ObjectParameter("BeginingDate", typeof(System.DateTime));
    
            var endingDateParameter = endingDate.HasValue ?
                new ObjectParameter("EndingDate", endingDate) :
                new ObjectParameter("EndingDate", typeof(System.DateTime));
    
            var warehouseIdParameter = warehouseId.HasValue ?
                new ObjectParameter("WarehouseId", warehouseId) :
                new ObjectParameter("WarehouseId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRPTPOSMReceiveIsuueDateWise_Result>("spRPTPOSMReceiveIsuueDateWise", beginingDateParameter, endingDateParameter, warehouseIdParameter);
        }
    
        public virtual ObjectResult<spRPTPOSMRInvoice_Result> spRPTPOSMRInvoice(Nullable<int> invoiceNumber)
        {
            var invoiceNumberParameter = invoiceNumber.HasValue ?
                new ObjectParameter("InvoiceNumber", invoiceNumber) :
                new ObjectParameter("InvoiceNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRPTPOSMRInvoice_Result>("spRPTPOSMRInvoice", invoiceNumberParameter);
        }
    
        public virtual ObjectResult<spRPTStockAsOnDate_Result> spRPTStockAsOnDate(Nullable<System.DateTime> trDate, Nullable<int> warehouseId)
        {
            var trDateParameter = trDate.HasValue ?
                new ObjectParameter("TrDate", trDate) :
                new ObjectParameter("TrDate", typeof(System.DateTime));
    
            var warehouseIdParameter = warehouseId.HasValue ?
                new ObjectParameter("WarehouseId", warehouseId) :
                new ObjectParameter("WarehouseId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRPTStockAsOnDate_Result>("spRPTStockAsOnDate", trDateParameter, warehouseIdParameter);
        }
    
        public virtual ObjectResult<spRPTCustomerWiseReturnDetails_Result> spRPTCustomerWiseReturnDetails(Nullable<int> warehouseID, Nullable<System.DateTime> beginingDate, Nullable<System.DateTime> endingDate, Nullable<int> customerID, Nullable<int> typeId)
        {
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var beginingDateParameter = beginingDate.HasValue ?
                new ObjectParameter("BeginingDate", beginingDate) :
                new ObjectParameter("BeginingDate", typeof(System.DateTime));
    
            var endingDateParameter = endingDate.HasValue ?
                new ObjectParameter("EndingDate", endingDate) :
                new ObjectParameter("EndingDate", typeof(System.DateTime));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("TypeId", typeId) :
                new ObjectParameter("TypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRPTCustomerWiseReturnDetails_Result>("spRPTCustomerWiseReturnDetails", warehouseIDParameter, beginingDateParameter, endingDateParameter, customerIDParameter, typeIdParameter);
        }
    
        public virtual ObjectResult<spRPTPOSMStockOnHand_Result> spRPTPOSMStockOnHand(Nullable<int> warehouseId)
        {
            var warehouseIdParameter = warehouseId.HasValue ?
                new ObjectParameter("WarehouseId", warehouseId) :
                new ObjectParameter("WarehouseId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRPTPOSMStockOnHand_Result>("spRPTPOSMStockOnHand", warehouseIdParameter);
        }
    
        public virtual ObjectResult<spRPTCustomerCurrentLedgerAsOnDate_Result> spRPTCustomerCurrentLedgerAsOnDate(Nullable<int> warehouseId, Nullable<int> custID, Nullable<System.DateTime> trDate)
        {
            var warehouseIdParameter = warehouseId.HasValue ?
                new ObjectParameter("WarehouseId", warehouseId) :
                new ObjectParameter("WarehouseId", typeof(int));
    
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            var trDateParameter = trDate.HasValue ?
                new ObjectParameter("TrDate", trDate) :
                new ObjectParameter("TrDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRPTCustomerCurrentLedgerAsOnDate_Result>("spRPTCustomerCurrentLedgerAsOnDate", warehouseIdParameter, custIDParameter, trDateParameter);
        }
    
        public virtual ObjectResult<spRPTCustomerCurrentLedgerDetailAsOnDate_Result> spRPTCustomerCurrentLedgerDetailAsOnDate(Nullable<int> warehouseId, Nullable<int> custID, Nullable<System.DateTime> trDate)
        {
            var warehouseIdParameter = warehouseId.HasValue ?
                new ObjectParameter("WarehouseId", warehouseId) :
                new ObjectParameter("WarehouseId", typeof(int));
    
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            var trDateParameter = trDate.HasValue ?
                new ObjectParameter("TrDate", trDate) :
                new ObjectParameter("TrDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRPTCustomerCurrentLedgerDetailAsOnDate_Result>("spRPTCustomerCurrentLedgerDetailAsOnDate", warehouseIdParameter, custIDParameter, trDateParameter);
        }
    
        public virtual ObjectResult<spRPTEmptyMovement_Result> spRPTEmptyMovement(Nullable<int> warehouseId, Nullable<System.DateTime> beginingDate, Nullable<System.DateTime> endingDate, Nullable<int> transactionType)
        {
            var warehouseIdParameter = warehouseId.HasValue ?
                new ObjectParameter("WarehouseId", warehouseId) :
                new ObjectParameter("WarehouseId", typeof(int));
    
            var beginingDateParameter = beginingDate.HasValue ?
                new ObjectParameter("BeginingDate", beginingDate) :
                new ObjectParameter("BeginingDate", typeof(System.DateTime));
    
            var endingDateParameter = endingDate.HasValue ?
                new ObjectParameter("EndingDate", endingDate) :
                new ObjectParameter("EndingDate", typeof(System.DateTime));
    
            var transactionTypeParameter = transactionType.HasValue ?
                new ObjectParameter("TransactionType", transactionType) :
                new ObjectParameter("TransactionType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRPTEmptyMovement_Result>("spRPTEmptyMovement", warehouseIdParameter, beginingDateParameter, endingDateParameter, transactionTypeParameter);
        }
    
        public virtual ObjectResult<spRPTCustomerCurrentLedger_Result> spRPTCustomerCurrentLedger(Nullable<int> warehouseId, Nullable<int> custID, Nullable<int> cType)
        {
            var warehouseIdParameter = warehouseId.HasValue ?
                new ObjectParameter("WarehouseId", warehouseId) :
                new ObjectParameter("WarehouseId", typeof(int));
    
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            var cTypeParameter = cType.HasValue ?
                new ObjectParameter("CType", cType) :
                new ObjectParameter("CType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRPTCustomerCurrentLedger_Result>("spRPTCustomerCurrentLedger", warehouseIdParameter, custIDParameter, cTypeParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> spGetCustomerSalesAmount(Nullable<int> pCustomer, Nullable<System.DateTime> pFromdate, Nullable<System.DateTime> pTodate, string pProcessFlag)
        {
            var pCustomerParameter = pCustomer.HasValue ?
                new ObjectParameter("pCustomer", pCustomer) :
                new ObjectParameter("pCustomer", typeof(int));
    
            var pFromdateParameter = pFromdate.HasValue ?
                new ObjectParameter("pFromdate", pFromdate) :
                new ObjectParameter("pFromdate", typeof(System.DateTime));
    
            var pTodateParameter = pTodate.HasValue ?
                new ObjectParameter("pTodate", pTodate) :
                new ObjectParameter("pTodate", typeof(System.DateTime));
    
            var pProcessFlagParameter = pProcessFlag != null ?
                new ObjectParameter("pProcessFlag", pProcessFlag) :
                new ObjectParameter("pProcessFlag", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("spGetCustomerSalesAmount", pCustomerParameter, pFromdateParameter, pTodateParameter, pProcessFlagParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> spGetRemainingCsQtyForSalesOrderNo(Nullable<int> warehouseID, Nullable<int> customerID, Nullable<int> salesOrderNo)
        {
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var salesOrderNoParameter = salesOrderNo.HasValue ?
                new ObjectParameter("SalesOrderNo", salesOrderNo) :
                new ObjectParameter("SalesOrderNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("spGetRemainingCsQtyForSalesOrderNo", warehouseIDParameter, customerIDParameter, salesOrderNoParameter);
        }
    
        public virtual ObjectResult<spRPTSalesSummaryWithAllInfo_76_Result> spRPTSalesSummaryWithAllInfo_76(Nullable<System.DateTime> beginingDate, Nullable<System.DateTime> endingDate, Nullable<int> warehouseID)
        {
            var beginingDateParameter = beginingDate.HasValue ?
                new ObjectParameter("BeginingDate", beginingDate) :
                new ObjectParameter("BeginingDate", typeof(System.DateTime));
    
            var endingDateParameter = endingDate.HasValue ?
                new ObjectParameter("EndingDate", endingDate) :
                new ObjectParameter("EndingDate", typeof(System.DateTime));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRPTSalesSummaryWithAllInfo_76_Result>("spRPTSalesSummaryWithAllInfo_76", beginingDateParameter, endingDateParameter, warehouseIDParameter);
        }
    
        public virtual ObjectResult<LoadSheetCR_Result> LoadSheetCR(Nullable<int> orderId)
        {
            var orderIdParameter = orderId.HasValue ?
                new ObjectParameter("OrderId", orderId) :
                new ObjectParameter("OrderId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LoadSheetCR_Result>("LoadSheetCR", orderIdParameter);
        }
    
        public virtual ObjectResult<spRPTInvoice_Result> spRPTInvoice(Nullable<int> invoiceNumber)
        {
            var invoiceNumberParameter = invoiceNumber.HasValue ?
                new ObjectParameter("InvoiceNumber", invoiceNumber) :
                new ObjectParameter("InvoiceNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRPTInvoice_Result>("spRPTInvoice", invoiceNumberParameter);
        }
    
        public virtual ObjectResult<spRPTCustomerWarehouseWiseSales43_Result> spRPTCustomerWarehouseWiseSales43(Nullable<int> warehouseId, Nullable<System.DateTime> beginingDate, Nullable<System.DateTime> endingDate)
        {
            var warehouseIdParameter = warehouseId.HasValue ?
                new ObjectParameter("WarehouseId", warehouseId) :
                new ObjectParameter("WarehouseId", typeof(int));
    
            var beginingDateParameter = beginingDate.HasValue ?
                new ObjectParameter("BeginingDate", beginingDate) :
                new ObjectParameter("BeginingDate", typeof(System.DateTime));
    
            var endingDateParameter = endingDate.HasValue ?
                new ObjectParameter("EndingDate", endingDate) :
                new ObjectParameter("EndingDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRPTCustomerWarehouseWiseSales43_Result>("spRPTCustomerWarehouseWiseSales43", warehouseIdParameter, beginingDateParameter, endingDateParameter);
        }
    
        public virtual int spStockBookedandBookedFree(Nullable<int> productID, Nullable<int> warehouseID, Nullable<int> inQuantity, string inFlag)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var inQuantityParameter = inQuantity.HasValue ?
                new ObjectParameter("inQuantity", inQuantity) :
                new ObjectParameter("inQuantity", typeof(int));
    
            var inFlagParameter = inFlag != null ?
                new ObjectParameter("inFlag", inFlag) :
                new ObjectParameter("inFlag", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spStockBookedandBookedFree", productIDParameter, warehouseIDParameter, inQuantityParameter, inFlagParameter);
        }
    
        public virtual ObjectResult<spGetSalesOrderSum_Result> spGetSalesOrderSum(Nullable<int> insalesorderno)
        {
            var insalesordernoParameter = insalesorderno.HasValue ?
                new ObjectParameter("insalesorderno", insalesorderno) :
                new ObjectParameter("insalesorderno", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetSalesOrderSum_Result>("spGetSalesOrderSum", insalesordernoParameter);
        }
    
        public virtual ObjectResult<spRPTReplaceInvoice_Result> spRPTReplaceInvoice(Nullable<int> disburseID)
        {
            var disburseIDParameter = disburseID.HasValue ?
                new ObjectParameter("DisburseID", disburseID) :
                new ObjectParameter("DisburseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRPTReplaceInvoice_Result>("spRPTReplaceInvoice", disburseIDParameter);
        }
    
        public virtual ObjectResult<spRPTReplacementDetails_Result> spRPTReplacementDetails(Nullable<System.DateTime> beginingDate, Nullable<System.DateTime> endingDate, Nullable<int> warehouseID, Nullable<int> customerID)
        {
            var beginingDateParameter = beginingDate.HasValue ?
                new ObjectParameter("BeginingDate", beginingDate) :
                new ObjectParameter("BeginingDate", typeof(System.DateTime));
    
            var endingDateParameter = endingDate.HasValue ?
                new ObjectParameter("EndingDate", endingDate) :
                new ObjectParameter("EndingDate", typeof(System.DateTime));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRPTReplacementDetails_Result>("spRPTReplacementDetails", beginingDateParameter, endingDateParameter, warehouseIDParameter, customerIDParameter);
        }
    
        public virtual ObjectResult<spRPTPMXCustomerSKUWiseWarehouseWiseSales_Result> spRPTPMXCustomerSKUWiseWarehouseWiseSales(Nullable<System.DateTime> beginingDate, Nullable<System.DateTime> endingDate, Nullable<int> warehouseId)
        {
            var beginingDateParameter = beginingDate.HasValue ?
                new ObjectParameter("BeginingDate", beginingDate) :
                new ObjectParameter("BeginingDate", typeof(System.DateTime));
    
            var endingDateParameter = endingDate.HasValue ?
                new ObjectParameter("EndingDate", endingDate) :
                new ObjectParameter("EndingDate", typeof(System.DateTime));
    
            var warehouseIdParameter = warehouseId.HasValue ?
                new ObjectParameter("WarehouseId", warehouseId) :
                new ObjectParameter("WarehouseId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRPTPMXCustomerSKUWiseWarehouseWiseSales_Result>("spRPTPMXCustomerSKUWiseWarehouseWiseSales", beginingDateParameter, endingDateParameter, warehouseIdParameter);
        }
    
        public virtual ObjectResult<spRPTOrderVsDelivery_Result> spRPTOrderVsDelivery(Nullable<System.DateTime> beginingDate, Nullable<System.DateTime> endingDate, Nullable<int> warehouseId)
        {
            var beginingDateParameter = beginingDate.HasValue ?
                new ObjectParameter("BeginingDate", beginingDate) :
                new ObjectParameter("BeginingDate", typeof(System.DateTime));
    
            var endingDateParameter = endingDate.HasValue ?
                new ObjectParameter("EndingDate", endingDate) :
                new ObjectParameter("EndingDate", typeof(System.DateTime));
    
            var warehouseIdParameter = warehouseId.HasValue ?
                new ObjectParameter("WarehouseId", warehouseId) :
                new ObjectParameter("WarehouseId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRPTOrderVsDelivery_Result>("spRPTOrderVsDelivery", beginingDateParameter, endingDateParameter, warehouseIdParameter);
        }
    
        public virtual ObjectResult<spRPTOrderFromCustomer_Result> spRPTOrderFromCustomer(Nullable<System.DateTime> beginingDate, Nullable<System.DateTime> endingDate, Nullable<int> warehouseId)
        {
            var beginingDateParameter = beginingDate.HasValue ?
                new ObjectParameter("BeginingDate", beginingDate) :
                new ObjectParameter("BeginingDate", typeof(System.DateTime));
    
            var endingDateParameter = endingDate.HasValue ?
                new ObjectParameter("EndingDate", endingDate) :
                new ObjectParameter("EndingDate", typeof(System.DateTime));
    
            var warehouseIdParameter = warehouseId.HasValue ?
                new ObjectParameter("WarehouseId", warehouseId) :
                new ObjectParameter("WarehouseId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRPTOrderFromCustomer_Result>("spRPTOrderFromCustomer", beginingDateParameter, endingDateParameter, warehouseIdParameter);
        }
    
        public virtual ObjectResult<spReturnmentInvoice_Result> spReturnmentInvoice(Nullable<int> returnmentID)
        {
            var returnmentIDParameter = returnmentID.HasValue ?
                new ObjectParameter("ReturnmentID", returnmentID) :
                new ObjectParameter("ReturnmentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReturnmentInvoice_Result>("spReturnmentInvoice", returnmentIDParameter);
        }
    
        public virtual ObjectResult<spRPTHreTruckFareAcknowledgementWise_Result> spRPTHreTruckFareAcknowledgementWise(Nullable<System.DateTime> beginingDate, Nullable<System.DateTime> endingDate, Nullable<int> warehouseID, Nullable<int> agencyId, string stat)
        {
            var beginingDateParameter = beginingDate.HasValue ?
                new ObjectParameter("BeginingDate", beginingDate) :
                new ObjectParameter("BeginingDate", typeof(System.DateTime));
    
            var endingDateParameter = endingDate.HasValue ?
                new ObjectParameter("EndingDate", endingDate) :
                new ObjectParameter("EndingDate", typeof(System.DateTime));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var agencyIdParameter = agencyId.HasValue ?
                new ObjectParameter("AgencyId", agencyId) :
                new ObjectParameter("AgencyId", typeof(int));
    
            var statParameter = stat != null ?
                new ObjectParameter("Stat", stat) :
                new ObjectParameter("Stat", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRPTHreTruckFareAcknowledgementWise_Result>("spRPTHreTruckFareAcknowledgementWise", beginingDateParameter, endingDateParameter, warehouseIDParameter, agencyIdParameter, statParameter);
        }
    
        public virtual int spEmptyTransferInformation(Nullable<int> inWarehouse, Nullable<int> inTransactionNo, string inTr, string inUser)
        {
            var inWarehouseParameter = inWarehouse.HasValue ?
                new ObjectParameter("inWarehouse", inWarehouse) :
                new ObjectParameter("inWarehouse", typeof(int));
    
            var inTransactionNoParameter = inTransactionNo.HasValue ?
                new ObjectParameter("inTransactionNo", inTransactionNo) :
                new ObjectParameter("inTransactionNo", typeof(int));
    
            var inTrParameter = inTr != null ?
                new ObjectParameter("inTr", inTr) :
                new ObjectParameter("inTr", typeof(string));
    
            var inUserParameter = inUser != null ?
                new ObjectParameter("inUser", inUser) :
                new ObjectParameter("inUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spEmptyTransferInformation", inWarehouseParameter, inTransactionNoParameter, inTrParameter, inUserParameter);
        }
    
        public virtual ObjectResult<spEmptyTransferDetail_Result> spEmptyTransferDetail(Nullable<int> inWarehouse, Nullable<int> inTransactionNo)
        {
            var inWarehouseParameter = inWarehouse.HasValue ?
                new ObjectParameter("inWarehouse", inWarehouse) :
                new ObjectParameter("inWarehouse", typeof(int));
    
            var inTransactionNoParameter = inTransactionNo.HasValue ?
                new ObjectParameter("inTransactionNo", inTransactionNo) :
                new ObjectParameter("inTransactionNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spEmptyTransferDetail_Result>("spEmptyTransferDetail", inWarehouseParameter, inTransactionNoParameter);
        }
    
        public virtual ObjectResult<spREmptyStock_Result> spREmptyStock(Nullable<System.DateTime> trDate, Nullable<int> warehouseId)
        {
            var trDateParameter = trDate.HasValue ?
                new ObjectParameter("TrDate", trDate) :
                new ObjectParameter("TrDate", typeof(System.DateTime));
    
            var warehouseIdParameter = warehouseId.HasValue ?
                new ObjectParameter("WarehouseId", warehouseId) :
                new ObjectParameter("WarehouseId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spREmptyStock_Result>("spREmptyStock", trDateParameter, warehouseIdParameter);
        }
    
        public virtual ObjectResult<spREmptyStockAsOnDate_Result> spREmptyStockAsOnDate(Nullable<System.DateTime> trDate, Nullable<int> warehouseId)
        {
            var trDateParameter = trDate.HasValue ?
                new ObjectParameter("TrDate", trDate) :
                new ObjectParameter("TrDate", typeof(System.DateTime));
    
            var warehouseIdParameter = warehouseId.HasValue ?
                new ObjectParameter("WarehouseId", warehouseId) :
                new ObjectParameter("WarehouseId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spREmptyStockAsOnDate_Result>("spREmptyStockAsOnDate", trDateParameter, warehouseIdParameter);
        }
    
        public virtual ObjectResult<spREmptyTransfer_Result> spREmptyTransfer(Nullable<int> transactionNo)
        {
            var transactionNoParameter = transactionNo.HasValue ?
                new ObjectParameter("TransactionNo", transactionNo) :
                new ObjectParameter("TransactionNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spREmptyTransfer_Result>("spREmptyTransfer", transactionNoParameter);
        }
    }
}
